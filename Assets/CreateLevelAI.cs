using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Sirenix.OdinInspector;
using System;
using System.Collections.Specialized;
using System.Linq;
using System.Security.Cryptography;
using UnityEngine.EventSystems;
using System.Text;
using System.IO;
using System.Numerics;
using TMPro;
using static FrontMan;

public class CreateLevelAI : MonoBehaviour
{
    [SerializeField] InputField Height;
    [SerializeField] InputField Width;
    [SerializeField] InputField Mines;
    [SerializeField] int height = 9;
    [SerializeField] int width = 9;
    [SerializeField] int mines = 15;
    [SerializeField] TextMeshProUGUI Warning;
    public static CreateLevelAI CL;
    private void Awake()
    {
        CL = this;
    }
    private void Start()
    {
        Height.onValueChanged.AddListener((s) => {
            if (!isNumeric(s)) Warning.text = "Only whole numbers in the input field pls.";
            else
            {
                int.TryParse(s, out height); Warning.text = "";
                if (height * width > 4000) Warning.text = "Wooooaaaaah big numbers there.  Look, one of the main things I wanted to achieve with this game is to allow you to make as big of a board as you want.  HOWEVER:  browser based programs have their limits.  I have personally tested up to 500x500, and that took about 4 minutes to create, and it crashed when exiting, so consider this a warning.";
            }
        });
        Width.onValueChanged.AddListener((s) => {
            if (!isNumeric(s)) Warning.text = "Only whole numbers in the input field pls.";
            else
            {
                int.TryParse(s, out width); Warning.text = "";
                if (height * width > 4000) Warning.text = "Wooooaaaaah big numbers there.  Look, one of the main things I wanted to achieve with this game is to allow you to make as big of a board as you want.  HOWEVER:  browser based programs have their limits.  I have personally tested up to 500x500, and that took about 4 minutes to create, and it crashed when exiting, so consider this a warning.";
            }
        });
        Mines.onValueChanged.AddListener((s) => { if (!isNumeric(s)) Warning.text = "Only whole numbers in the input field pls."; else { int.TryParse(s, out mines); Warning.text = ""; } });
    }

    public void SetBoard()
    {
        if (!isNumeric(Height.text) || !isNumeric(Width.text) || !isNumeric(Mines.text))
        {
            Warning.text = "Only whole numbers in the input field pls.";
            return;
        }
        if (height <= 0 || width <= 0)
        {
            Warning.text = "Height and Width must be at least 1";
            return;
        }
        if (mines < 0)
        {
            Warning.text = "Mines must be at least 0";
            return;
        }
        int TotalTiles = height * width;
        if (mines > height * width)
        {
            Warning.text = $"More mines that total tiles!  You have {TotalTiles} total tiles.  The amount of mines must be less than or equal to that";
            return;
        }
        FM.SetBoard(height, width, mines);
        MainMenuAI.MM.PutAway();
    }




    public bool isNumeric(string s)
    {
        float output = 0;
        if (s == null)
        {
            return false;
        }
        return (float.TryParse(s, out output));
    }











    string Encode(string input, IEnumerable<char> map)
    {
        BigInteger inp = BigInteger.Parse(input);
        Debug.Assert(inp >= 0, "not implemented for negative numbers");

        var b = map.Count();
        // value -> character
        var toChar = map.Select((v, i) => new { Value = v, Index = i }).ToDictionary(i => i.Index, i => i.Value);
        var res = "";
        if (inp == 0)
        {
            return "" + toChar[0];
        }
        while (inp > 0)
        {
            // encoded least-to-most significant
            var val = (int)(inp % b);
            inp = inp / b;
            res += toChar[val];
        }
        return res;
    }

    BigInteger Decode(string encoded, IEnumerable<char> map)
    {
        var b = map.Count();
        // character -> value
        var toVal = map.Select((v, i) => new { Value = v, Index = i }).ToDictionary(i => i.Value, i => i.Index);
        BigInteger res = 0;
        // go in reverse to mirror encoding
        for (var i = encoded.Length - 1; i >= 0; i--)
        {
            var ch = encoded[i];
            var val = toVal[ch];
            res = (res * b) + val;
        }
        return res;
    }
    public string Converter2(string s)
    {
        BigInteger base6 = BigInteger.Parse(s);
        BigInteger keep = base6;
        string output = "";
        string tens = "";

        while (base6 > 143)
        {
            base6 = subtractBase6(base6, 144);
        }
        keep = subtractBase6(keep, base6);
        BigInteger tensInt = BigInteger.Parse(tens);
        output = tensInt > 143 ? Converter(tens) : GetBase64Char(tensInt).ToString();
        output += GetBase64Char(base6).ToString();
        return output;
    }

    public string Converter(string s)
    {
        BigInteger base6 = BigInteger.Parse(s);
        string output = "";
        string tens = "";

        while (base6 > 143)
        {
            base6 = subtractBase6(base6, 144);
            tens = sumBaseB(tens + "", 1 + "", 6);
        }
        BigInteger tensInt = BigInteger.Parse(tens);
        output = tensInt > 143 ? Converter(tens) : GetBase64Char(tensInt).ToString();
        output += GetBase64Char(base6).ToString();
        return output;
    }

    public char GetBase64Char(BigInteger number)
    {
        switch ((int)number)
        {
            case 0:
                return 'A';
            case 1:
                return 'B';
            case 2:
                return 'C';
            case 3:
                return 'D';
            case 4:
                return 'E';
            case 5:
                return 'F';
            case 10:
                return 'G';
            case 11:
                return 'H';
            case 12:
                return 'I';
            case 13:
                return 'J';
            case 14:
                return 'K';
            case 15:
                return 'L';
            case 20:
                return 'M';
            case 21:
                return 'N';
            case 22:
                return 'O';
            case 23:
                return 'P';
            case 24:
                return 'Q';
            case 25:
                return 'R';
            case 30:
                return 'S';
            case 31:
                return 'T';
            case 32:
                return 'U';
            case 33:
                return 'V';
            case 34:
                return 'W';
            case 35:
                return 'X';
            case 40:
                return 'Y';
            case 41:
                return 'Z';
            case 42:
                return 'a';
            case 43:
                return 'b';
            case 44:
                return 'c';
            case 45:
                return 'd';
            case 50:
                return 'e';
            case 51:
                return 'f';
            case 52:
                return 'g';
            case 53:
                return 'h';
            case 54:
                return 'i';
            case 55:
                return 'j';
            case 100:
                return 'k';
            case 101:
                return 'l';
            case 102:
                return 'm';
            case 103:
                return 'n';
            case 104:
                return 'o';
            case 105:
                return 'p';
            case 110:
                return 'q';
            case 111:
                return 'r';
            case 112:
                return 's';
            case 113:
                return 't';
            case 114:
                return 'u';
            case 115:
                return 'v';
            case 120:
                return 'w';
            case 121:
                return 'x';
            case 122:
                return 'y';
            case 123:
                return 'z';
            case 124:
                return '0';
            case 125:
                return '1';
            case 130:
                return '2';
            case 131:
                return '3';
            case 132:
                return '4';
            case 133:
                return '5';
            case 134:
                return '6';
            case 135:
                return '7';
            case 140:
                return '8';
            case 141:
                return '9';
            case 142:
                return '+';
            case 143:
                return '/';
            case 144:
                return '!';
        }
        print("Error!");
        return '?';
    }
    [Button]
    public void Run()
    {
        var map = new char[] {
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K',
        'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
        'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'j', 'k', 'm', 'n', 'p', 'q', 'r', 's', 't',
        'u', 'v', 'x', 'y', 'z', '0', '1', '2', '3', '4',
        '5', '6', '7', '8', '9', '/', '[',']', '!', '<', '>'
        , '{', '}', '-', '+', '=', '_','@', '#', '$', '%'
        , ',', '.', '?', ';', ':','"', '\'', '\\', '|'
        , '^', '&', '*', '(', ')', '`','~',
    };
        print(Time.realtimeSinceStartup);
        string encoded = Encodemap);
        print(Time.realtimeSinceStartup);
        print(encoded);
        print(Time.realtimeSinceStartup);
        print(Decode(encoded, map));
        print(Time.realtimeSinceStartup);
        //print(getDifference(144, 332, 6));
        //print(sumBaseB(22 + "", 55 + "", 6));
        //outputT.text = Converter("351143515231231231231");
        //print(Converter("351143515231231231231"));
        //print(subtractBase6(23, 4));
        //print(subtractBase6(5, 2));55
        //print(subtractBase6(332, 144));
    }

    public BigInteger subtractBase6(BigInteger a, BigInteger b)
    {
        BigInteger[] digitsA = GetIntArray(a);
        BigInteger[] digitsB = GetIntArray(b);
        bool carry = false;
        int maxLength = Mathf.Max(digitsA.Length, digitsB.Length);
        BigInteger tempA = 0;
        BigInteger tempB = 0;
        string output = "";
        BigInteger outP;
        for (int i = 0; i < maxLength; i++)
        {
            try { tempA = digitsA[i]; } catch (Exception) { tempA = 0; }
            try { tempB = digitsB[i]; } catch (Exception) { tempB = 0; }
            if (carry) tempB++;
            if(tempA < tempB)
            {
                carry = true;
                outP = 6 - (tempB - tempA);
            }
            else
            {
                carry = false;
                outP = tempA - tempB;
            }
            output =  outP + output;
        }
        return BigInteger.Parse(output);
    }
    public BigInteger[] GetIntArray(BigInteger num)
    {
        List<BigInteger> listOfInts = new List<BigInteger>();
        while (num > 0)
        {
            listOfInts.Add(num % 10);
            num = num / 10;
        }
        //listOfInts.Reverse();
        return listOfInts.ToArray();
    }

    static string sumBaseB(string a, string b, int base_var)
    {
        int len_a, len_b;

        len_a = a.Length;
        len_b = b.Length;

        string sum, s;
        s = "";
        sum = "";

        int diff;
        diff = Math.Abs(len_a - len_b);

        // Padding 0 in front of the
        // number to make both numbers equal
        for (int i = 1; i <= diff; i++)
            s += "0";

        // Condition to check if the strings
        // have lengths mis-match
        if (len_a < len_b)
            a = s + a;
        else
            b = s + b;

        int curr, carry = 0;

        // Loop to find the find the sum
        // of two integers of base B
        for (int i = Math.Max(len_a, len_b) - 1;
                            i > -1; i--)
        {

            // Current Place value for
            // the resultant sum
            curr = carry + (a[i] - '0') +
                        (b[i] - '0');

            // Update carry
            carry = curr / base_var;

            // Find current digit
            curr = curr % base_var;

            // Update sum result
            sum = (char)(curr + '0') + sum;
        }
        if (carry > 0)
            sum = (char)(carry + '0') + sum;
        return sum;
    }

    public static int getDifference(int B, int X, int Y)
    {

        // To store final answer
        int finalVal = 0;

        // To store carry generated
        int carry = 0;

        // To keep track of power
        int power = 1;

        while (X > 0)
        {

            // Store last digits of current
            // value of X and Y in n1 and
            // n2 respectively
            int n1 = X % 10;
            int n2 = Y % 10;

            // Remove last digits from
            // X and Y
            X = X / 10;
            Y = Y / 10;

            int temp = n1 - n2 + carry;

            if (temp < 0)
            {

                // Carry = -1 will act
                // as borrow
                carry = -1;
                temp += B;
            }

            else
            {
                carry = 0;
            }

            // Add in final result
            finalVal += temp * power;
            power = power * 10;
        }

        // Return final result
        return finalVal;
    }




}
